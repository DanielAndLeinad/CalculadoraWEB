DIFEREN√áA ENTRE Function E function NO JAVASCRIPT

------------------------------------------------------------
1Ô∏è‚É£ function (Declara√ß√£o de Fun√ß√£o Tradicional)
------------------------------------------------------------

A palavra-chave "function" √© usada para declarar fun√ß√µes de forma tradicional. 
Isso permite que voc√™ reutilize blocos de c√≥digo em seu programa.

Exemplo:
--------------------------------------
function somar(a, b) {
    return a + b;
}

console.log(somar(3, 5)); // Sa√≠da: 8
--------------------------------------

‚úÖ Criamos uma fun√ß√£o chamada "somar" que recebe dois n√∫meros e retorna a soma.  
‚úÖ Essa fun√ß√£o √© definida de forma **est√°tica**, ou seja, seu c√≥digo j√° existe no momento em que o JavaScript est√° interpretando o script.

------------------------------------------------------------
2Ô∏è‚É£ Function (Construtor de Fun√ß√£o Din√¢mica)
------------------------------------------------------------

"Function" (com F mai√∫sculo) √© um **construtor** que cria fun√ß√µes de forma din√¢mica, 
como se fossem strings sendo transformadas em c√≥digo.

Exemplo:
--------------------------------------
const somar = new Function("a", "b", "return a + b;");

console.log(somar(3, 5)); // Sa√≠da: 8
--------------------------------------

‚úÖ Criamos a fun√ß√£o **dinamicamente**, passando par√¢metros e o corpo como strings.  
‚úÖ Essa fun√ß√£o **n√£o existe no c√≥digo-fonte original**, ela s√≥ √© criada em tempo de execu√ß√£o.

------------------------------------------------------------
üîπ PRINCIPAIS DIFEREN√áAS ENTRE function E Function üîπ
------------------------------------------------------------

| Caracter√≠stica        | function (Tradicional) | Function (Construtor) |
|----------------------|----------------------|------------------------|
| **Como √© definida?** | Definida no c√≥digo diretamente | Criada dinamicamente em tempo de execu√ß√£o |
| **Quando √© criada?** | No momento que o c√≥digo √© carregado | Apenas quando o "new Function()" √© chamado |
| **Acesso ao escopo** | Acessa vari√°veis externas (escopo l√©xico) | N√£o acessa vari√°veis externas |
| **Seguran√ßa** | Seguro de usar | Pode ser arriscado (similar ao "eval()") |
| **Usado para?** | Fun√ß√µes normais e reutiliz√°veis | Criar fun√ß√µes dinamicamente a partir de strings |

------------------------------------------------------------
üö® DIFEREN√áA IMPORTANTE: ESCOPO üö®
------------------------------------------------------------

A maior diferen√ßa pr√°tica entre os dois √© o **escopo**.

üîπ Uma fun√ß√£o normal (function) **pode acessar vari√°veis externas** ao seu bloco de c√≥digo:

Exemplo:
--------------------------------------
let valor = 10;

function dobrar() {
    return valor * 2; // Acessa "valor" que est√° fora da fun√ß√£o
}

console.log(dobrar()); // Sa√≠da: 20
--------------------------------------

üîπ J√° uma fun√ß√£o criada com Function **N√ÉO acessa** vari√°veis externas:

Exemplo:
--------------------------------------
let valor = 10;

const dobrar = new Function("return valor * 2;"); 

console.log(dobrar()); // Erro: "valor is not defined"
--------------------------------------

üö® Isso acontece porque "new Function()" cria a fun√ß√£o em um escopo isolado, sem acesso ao escopo externo.

------------------------------------------------------------
üìå QUANDO USAR CADA UM?
------------------------------------------------------------

‚úÖ **Use function (tradicional) sempre que poss√≠vel**, pois √© mais seguro, r√°pido e tem acesso ao escopo externo.

‚ö†Ô∏è **Use Function() apenas quando precisar criar fun√ß√µes dinamicamente**, por exemplo, ao construir uma fun√ß√£o baseada em um c√≥digo recebido externamente (mas tenha cuidado com seguran√ßa!).

------------------------------------------------------------
üèÜ RESUMO FINAL üèÜ
------------------------------------------------------------

- **function** ‚Üí Forma comum e recomendada de criar fun√ß√µes.
- **Function** ‚Üí Criada dinamicamente, mas n√£o acessa escopos externos e pode ser arriscada.

------------------------------------------------------------
üéØ Espero que tenha ficado claro! Bons estudos! üöÄüòÉ
